// <auto-generated />
using System;
using LogicaDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaDatos.Migrations
{
    [DbContext(typeof(DbContextApp))]
    [Migration("20250723024911_establecimientoCoord")]
    partial class establecimientoCoord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EspecialidadProfesional", b =>
                {
                    b.Property<int>("EspecialidadesId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesionalesId")
                        .HasColumnType("int");

                    b.HasKey("EspecialidadesId", "ProfesionalesId");

                    b.HasIndex("ProfesionalesId");

                    b.ToTable("EspecialidadProfesional");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<int>("EstablecimientoId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaAsistencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfesionalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("EstablecimientoId");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Comentario", b =>
                {
                    b.Property<int>("ComentarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComentarioId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("ComentarioPadreId")
                        .HasColumnType("int");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int");

                    b.HasKey("ComentarioId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ComentarioPadreId");

                    b.HasIndex("ProfesionalId");

                    b.HasIndex("PublicacionId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Ejercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GrupoMuscular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instrucciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("Ejercicios");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.EjercicioRealizado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Orden")
                        .HasColumnType("int");

                    b.Property<bool>("SeRealizo")
                        .HasColumnType("bit");

                    b.Property<int>("SesionRutinaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("SesionRutinaId");

                    b.ToTable("EjercicioRealizadosPorClientes");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Especialidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Establecimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitud")
                        .HasColumnType("float");

                    b.Property<double?>("Longitud")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Establecimientos");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.LikeComentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("ComentarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ComentarioId");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("LikeComentarios");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.LikePublicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProfesionalId");

                    b.HasIndex("PublicacionId");

                    b.ToTable("LikePublicaciones");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int");

                    b.Property<bool>("EsFavorito")
                        .HasColumnType("bit");

                    b.Property<int?>("EstablecimientoId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicacionId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEntidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EstablecimientoId");

                    b.HasIndex("ProfesionalId");

                    b.HasIndex("PublicacionId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("CitaId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("ComentarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Leido")
                        .HasColumnType("bit");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicacionId")
                        .HasColumnType("int");

                    b.Property<int?>("RutinaId")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Profesional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profesionales");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Publicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminAprobadorId")
                        .HasColumnType("int");

                    b.Property<int?>("AdminCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("CantLikes")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsPrivada")
                        .HasColumnType("bit");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaProgramada")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MostrarEnNoticiasPublicas")
                        .HasColumnType("bit");

                    b.Property<string>("MotivoRechazo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vistas")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminAprobadorId");

                    b.HasIndex("AdminCreadorId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("Publicaciones");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Rutina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreRutina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("Rutinas");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.RutinaAsignada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("RutinaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("RutinaId");

                    b.ToTable("RutinasAsignadas");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.RutinaEjercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("RutinaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("RutinaId");

                    b.ToTable("RutinaEjercicios");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.SesionRutina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DuracionMin")
                        .HasColumnType("int");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRealizada")
                        .HasColumnType("datetime2");

                    b.Property<int>("RutinaAsignadaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("RutinaAsignadaId");

                    b.ToTable("SesionesRutina");
                });

            modelBuilder.Entity("LogicaNegocio.Extra.SerieRealizada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EjercicioRealizadoId")
                        .HasColumnType("int");

                    b.Property<float?>("PesoUtilizado")
                        .HasColumnType("real");

                    b.Property<int>("Repeticiones")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EjercicioRealizadoId");

                    b.ToTable("SeriesParaEjerciciosDeCliente");
                });

            modelBuilder.Entity("EspecialidadProfesional", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Especialidad", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Clases.Profesional", null)
                        .WithMany()
                        .HasForeignKey("ProfesionalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Cita", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Cliente", "Cliente")
                        .WithMany("Citas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Clases.Especialidad", "Especialidad")
                        .WithMany("Citas")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Clases.Establecimiento", "Establecimiento")
                        .WithMany("Citas")
                        .HasForeignKey("EstablecimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Clases.Profesional", "Profesional")
                        .WithMany("Citas")
                        .HasForeignKey("ProfesionalId");

                    b.Navigation("Cliente");

                    b.Navigation("Especialidad");

                    b.Navigation("Establecimiento");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Comentario", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Admin", "Admin")
                        .WithMany("Comentarios")
                        .HasForeignKey("AdminId");

                    b.HasOne("LogicaNegocio.Clases.Cliente", "Cliente")
                        .WithMany("Comentarios")
                        .HasForeignKey("ClienteId");

                    b.HasOne("LogicaNegocio.Clases.Comentario", "ComentarioPadre")
                        .WithMany("Respuestas")
                        .HasForeignKey("ComentarioPadreId");

                    b.HasOne("LogicaNegocio.Clases.Profesional", "Profesional")
                        .WithMany("Comentarios")
                        .HasForeignKey("ProfesionalId");

                    b.HasOne("LogicaNegocio.Clases.Publicacion", "Publicacion")
                        .WithMany("Comentarios")
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Cliente");

                    b.Navigation("ComentarioPadre");

                    b.Navigation("Profesional");

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Ejercicio", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Profesional", "Profesional")
                        .WithMany("Ejercicios")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.EjercicioRealizado", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Ejercicio", "Ejercicio")
                        .WithMany()
                        .HasForeignKey("EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Clases.SesionRutina", "SesionRutina")
                        .WithMany("EjerciciosRealizados")
                        .HasForeignKey("SesionRutinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ejercicio");

                    b.Navigation("SesionRutina");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.LikeComentario", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Admin", null)
                        .WithMany("LikesComentarios")
                        .HasForeignKey("AdminId");

                    b.HasOne("LogicaNegocio.Clases.Cliente", null)
                        .WithMany("LikesComentarios")
                        .HasForeignKey("ClienteId");

                    b.HasOne("LogicaNegocio.Clases.Comentario", "Comentario")
                        .WithMany("Likes")
                        .HasForeignKey("ComentarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Clases.Profesional", null)
                        .WithMany("LikesComentarios")
                        .HasForeignKey("ProfesionalId");

                    b.Navigation("Comentario");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.LikePublicacion", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Admin", null)
                        .WithMany("LikesPublicaciones")
                        .HasForeignKey("AdminId");

                    b.HasOne("LogicaNegocio.Clases.Cliente", null)
                        .WithMany("LikesPublicaciones")
                        .HasForeignKey("ClienteId");

                    b.HasOne("LogicaNegocio.Clases.Profesional", null)
                        .WithMany("LikesPublicaciones")
                        .HasForeignKey("ProfesionalId");

                    b.HasOne("LogicaNegocio.Clases.Publicacion", "Publicacion")
                        .WithMany("Likes")
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Media", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Admin", "Admin")
                        .WithMany("FotosPerfil")
                        .HasForeignKey("AdminId");

                    b.HasOne("LogicaNegocio.Clases.Cliente", "Cliente")
                        .WithMany("FotosPerfil")
                        .HasForeignKey("ClienteId");

                    b.HasOne("LogicaNegocio.Clases.Ejercicio", "Ejercicio")
                        .WithMany("Medias")
                        .HasForeignKey("EjercicioId");

                    b.HasOne("LogicaNegocio.Clases.Establecimiento", "Establecimiento")
                        .WithMany("Media")
                        .HasForeignKey("EstablecimientoId");

                    b.HasOne("LogicaNegocio.Clases.Profesional", "Profesional")
                        .WithMany("FotosPerfil")
                        .HasForeignKey("ProfesionalId");

                    b.HasOne("LogicaNegocio.Clases.Publicacion", "Publicacion")
                        .WithMany("ListaMedia")
                        .HasForeignKey("PublicacionId");

                    b.Navigation("Admin");

                    b.Navigation("Cliente");

                    b.Navigation("Ejercicio");

                    b.Navigation("Establecimiento");

                    b.Navigation("Profesional");

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Notificacion", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Admin", "Admin")
                        .WithMany("Notificaciones")
                        .HasForeignKey("AdminId");

                    b.HasOne("LogicaNegocio.Clases.Cliente", "Cliente")
                        .WithMany("Notificaciones")
                        .HasForeignKey("ClienteId");

                    b.HasOne("LogicaNegocio.Clases.Profesional", "Profesional")
                        .WithMany("Notificaciones")
                        .HasForeignKey("ProfesionalId");

                    b.Navigation("Admin");

                    b.Navigation("Cliente");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Publicacion", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Admin", "AdminAprobador")
                        .WithMany()
                        .HasForeignKey("AdminAprobadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogicaNegocio.Clases.Admin", "AdminCreador")
                        .WithMany()
                        .HasForeignKey("AdminCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogicaNegocio.Clases.Admin", null)
                        .WithMany("Publicaciones")
                        .HasForeignKey("AdminId");

                    b.HasOne("LogicaNegocio.Clases.Profesional", "Profesional")
                        .WithMany("Publicaciones")
                        .HasForeignKey("ProfesionalId");

                    b.Navigation("AdminAprobador");

                    b.Navigation("AdminCreador");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Rutina", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Profesional", "Profesional")
                        .WithMany("Rutinas")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.RutinaAsignada", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Cliente", "Cliente")
                        .WithMany("RutinasAsignadas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Clases.Rutina", "Rutina")
                        .WithMany("Asignaciones")
                        .HasForeignKey("RutinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Rutina");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.RutinaEjercicio", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Ejercicio", "Ejercicio")
                        .WithMany()
                        .HasForeignKey("EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Clases.Rutina", "Rutina")
                        .WithMany("Ejercicios")
                        .HasForeignKey("RutinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ejercicio");

                    b.Navigation("Rutina");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.SesionRutina", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.Ejercicio", null)
                        .WithMany("RutinaEjercicios")
                        .HasForeignKey("EjercicioId");

                    b.HasOne("LogicaNegocio.Clases.RutinaAsignada", "RutinaAsignada")
                        .WithMany("Sesiones")
                        .HasForeignKey("RutinaAsignadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RutinaAsignada");
                });

            modelBuilder.Entity("LogicaNegocio.Extra.SerieRealizada", b =>
                {
                    b.HasOne("LogicaNegocio.Clases.EjercicioRealizado", "EjercicioRealizado")
                        .WithMany("Series")
                        .HasForeignKey("EjercicioRealizadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EjercicioRealizado");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Admin", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("FotosPerfil");

                    b.Navigation("LikesComentarios");

                    b.Navigation("LikesPublicaciones");

                    b.Navigation("Notificaciones");

                    b.Navigation("Publicaciones");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Cliente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Comentarios");

                    b.Navigation("FotosPerfil");

                    b.Navigation("LikesComentarios");

                    b.Navigation("LikesPublicaciones");

                    b.Navigation("Notificaciones");

                    b.Navigation("RutinasAsignadas");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Comentario", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Ejercicio", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("RutinaEjercicios");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.EjercicioRealizado", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Especialidad", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Establecimiento", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Profesional", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Comentarios");

                    b.Navigation("Ejercicios");

                    b.Navigation("FotosPerfil");

                    b.Navigation("LikesComentarios");

                    b.Navigation("LikesPublicaciones");

                    b.Navigation("Notificaciones");

                    b.Navigation("Publicaciones");

                    b.Navigation("Rutinas");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Publicacion", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Likes");

                    b.Navigation("ListaMedia");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.Rutina", b =>
                {
                    b.Navigation("Asignaciones");

                    b.Navigation("Ejercicios");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.RutinaAsignada", b =>
                {
                    b.Navigation("Sesiones");
                });

            modelBuilder.Entity("LogicaNegocio.Clases.SesionRutina", b =>
                {
                    b.Navigation("EjerciciosRealizados");
                });
#pragma warning restore 612, 618
        }
    }
}
